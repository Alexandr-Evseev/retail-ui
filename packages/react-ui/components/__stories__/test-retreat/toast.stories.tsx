import { CSFStory } from 'creevey';
import React from 'react';
import { WebDriver } from 'selenium-webdriver';
import until from 'selenium-webdriver/lib/until';

import { Toast } from '../../Toast'; // 2
import { Button } from '../../Button';

export default {
  title: 'TR Toast',
};

// Utils

/**
 * –û–∂–∏–¥–∞–µ—Ç, –ø–æ–∫–∞ –ø—Ä–æ–π–¥—ë—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –º–∏–ª–∏—Å–µ–∫—É–Ω–¥
 *
 * @param driver
 * @param msTime
 */
async function sleep(driver: WebDriver, msTime: number) {
  let isDone = false;
  setTimeout(() => (isDone = true), msTime);
  await driver.wait(() => isDone, msTime);
}

export const ComplexToast: CSFStory<JSX.Element> = () => {
  function showComplexNotification() {
    Toast.push('Successfully saved', {
      label: 'Cancel',
      handler: () => Toast.push('Canceled'),
    });
  }

  return (
    <div style={{ height: '100px', width: '100vw' }} id="test-element-wrapper">
      <Button onClick={showComplexNotification}>Show notification</Button>
    </div>
  );
};

/**
 * ComplexToast. –¢–æ—Å—Ç —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
 *
 * 0. –ò—Å—Ç–æ—Ä–∏—è showToast
 * 1. –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª –≤—ã–∑–æ–≤–∞ —Ç–æ—Å—Ç–∞
 * 2. –ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—É
 * 3. üì∏ —Ç–æ—Å—Ç –ø–æ—è–≤–∏–ª—Å—è
 *
 * 0. –ò—Å—Ç–æ—Ä–∏—è hideToast
 * 1. –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª –≤—ã–∑–æ–≤–∞ —Ç–æ—Å—Ç–∞
 * 2. –ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—É
 * 3. –¢–æ—Å—Ç –ø–æ—è–≤–∏–ª—Å—è
 * 4. üì∏ —Å–ø—É—Å—Ç—è 7—Å–µ–∫ —Ç–æ—Å—Ç –∑–∞–∫—Ä—ã–ª—Å—è
 * 5. –ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—É
 * 6. –¢–æ—Å—Ç –ø–æ—è–≤–∏–ª—Å—è
 * 7. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ —Ç–æ—Å—Ç
 * 8. üì∏ —Å–ø—É—Å—Ç—è 7—Å–µ–∫ —Ç–æ—Å—Ç –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è
 *
 *  Profit!
 */

ComplexToast.story = {
  parameters: {
    creevey: {
      tests: {
        async showToast() {
          const element = await this.browser.findElement({ css: '#test-element-wrapper' });
          const toastControl = await this.browser.findElement({ css: 'button' });

          await this.browser
            .actions({ bridge: true })
            .click(toastControl)
            .perform();

          await this.browser.wait(until.elementLocated({ css: '[data-tid~="ToastView__root"]' }), 3000);
          const toastToggled = await element.takeScreenshot();

          await this.expect({ toastToggled }).to.matchImages();
        },

        async hideToast() {
          const element = await this.browser.findElement({ css: '#test-element-wrapper' });
          const toastControl = await this.browser.findElement({ css: 'button' });

          await this.browser
            .actions({ bridge: true })
            .click(toastControl)
            .perform();

          await this.browser.wait(until.elementLocated({ css: '[data-tid~="ToastView__root"]' }), 3000);
          await sleep(this.browser, 7000);

          const toastClosedTimeout = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(toastControl)
            .perform();

          const toast = await this.browser.wait(until.elementLocated({ css: '[data-tid~="ToastView__root"]' }), 3000);
          await this.browser
            .actions({ bridge: true })
            .move({ origin: toast })
            .perform();

          await sleep(this.browser, 7000);
          const toastNotClosingOnHover = await element.takeScreenshot();

          await this.expect({ toastClosedTimeout, toastNotClosingOnHover }).to.matchImages();
        },
      },
    },
  },
};

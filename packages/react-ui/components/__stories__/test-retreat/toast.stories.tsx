import { CSFStory } from 'creevey';
import React from 'react';
import { WebDriver } from 'selenium-webdriver';
import until from 'selenium-webdriver/lib/until';
import { action } from '@storybook/addon-actions';

import { Toast } from '../../Toast'; // 2
import { Nullable } from '../../../typings/utility-types';
import { Button } from '../../Button';

export default {
  title: 'TR Toast',
};

// Utils

/**
 * –û–∂–∏–¥–∞–µ—Ç, –ø–æ–∫–∞ –ø—Ä–æ–π–¥—ë—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –º–∏–ª–∏—Å–µ–∫—É–Ω–¥
 *
 * @param driver
 * @param msTime
 */
async function sleep(driver: WebDriver, msTime: number) {
  let isDone = false;
  setTimeout(() => (isDone = true), msTime);
  await driver.wait(() => isDone, msTime);
}

export const ComplexToast: CSFStory<JSX.Element> = () => {
  function showComplexNotification() {
    Toast.push('Successfully saved', {
      label: 'Cancel',
      handler: () => Toast.push('Canceled'),
    });
  }

  return (
    <div style={{ height: '100px', width: '100vw' }} id="test-element-wrapper">
      <Button onClick={showComplexNotification}>Show notification</Button>
    </div>
  );
};

/**
 * ComplexToast. –¢–æ—Å—Ç —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
 *
 * 0. –ò—Å—Ç–æ—Ä–∏—è showToast
 * 1. –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª –≤—ã–∑–æ–≤–∞ —Ç–æ—Å—Ç–∞
 * 2. –ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—É
 * 3. üì∏ —Ç–æ—Å—Ç –ø–æ—è–≤–∏–ª—Å—è
 *
 * 0. –ò—Å—Ç–æ—Ä–∏—è hideToast
 * 1. –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª –≤—ã–∑–æ–≤–∞ —Ç–æ—Å—Ç–∞
 * 2. –ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—É
 * 3. –¢–æ—Å—Ç –ø–æ—è–≤–∏–ª—Å—è
 * 4. üì∏ —Å–ø—É—Å—Ç—è 7—Å–µ–∫ —Ç–æ—Å—Ç –∑–∞–∫—Ä—ã–ª—Å—è
 * 5. –ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—É
 * 6. –¢–æ—Å—Ç –ø–æ—è–≤–∏–ª—Å—è
 * 7. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ —Ç–æ—Å—Ç
 * 8. üì∏ —Å–ø—É—Å—Ç—è 7—Å–µ–∫ —Ç–æ—Å—Ç –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è
 *
 *  Profit!
 */

ComplexToast.story = {
  parameters: {
    creevey: {
      tests: {
        async showToast() {
          const element = await this.browser.findElement({ css: '#test-element-wrapper' });
          const toastControl = await this.browser.findElement({ css: 'button' });

          await this.browser
            .actions({ bridge: true })
            .click(toastControl)
            .perform();

          await this.browser.wait(until.elementLocated({ css: '[data-tid~="ToastView__root"]' }), 3000);
          const toastToggled = await element.takeScreenshot();

          await this.expect({ toastToggled }).to.matchImages();
        },

        async hideToast() {
          const element = await this.browser.findElement({ css: '#test-element-wrapper' });
          const toastControl = await this.browser.findElement({ css: 'button' });

          await this.browser
            .actions({ bridge: true })
            .click(toastControl)
            .perform();

          await this.browser.wait(until.elementLocated({ css: '[data-tid~="ToastView__root"]' }), 3000);
          await sleep(this.browser, 7000);

          const toastClosedTimeout = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(toastControl)
            .perform();

          const toast = await this.browser.wait(until.elementLocated({ css: '[data-tid~="ToastView__root"]' }), 3000);
          await this.browser
            .actions({ bridge: true })
            .move({ origin: toast })
            .perform();

          await sleep(this.browser, 7000);
          const toastNotClosingOnHover = await element.takeScreenshot();

          await this.expect({ toastClosedTimeout, toastNotClosingOnHover }).to.matchImages();
        },
      },
    },
  },
};

// –§–∏—á–∞—Ä–µ–∫–≤–µ—Å—Ç:
// –í –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–±—Ä–∞–Ω –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ (–ø–æ –≥–∞–π–¥–∞–º).
// –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –æ–Ω –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã
// –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–¥—É–º–∞—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ –≤ –≥–∞–π–¥–∞—Ö –∏ –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É,
// –æ–±—Ä–µ–∑–∞—Ç—å –µ–≥–æ —Å —Ç—Ä–æ–µ—Ç–æ—á–∏–µ–º –≤ –∫–æ–Ω—Ü–µ

export const LongName: CSFStory<JSX.Element> = () => (
  <Toast>
    longggggggggggggname1234512345123451234512345123451234512345123451234512345123451234512345jgjjjjjgfgfffffffffjgjfgjfgjjfjgjfgverylonggkgkkgkgkvfgkgkkgkgkg
  </Toast>
);
LongName.story = { name: 'toast with long name' };

export const ToastDissapearWhenNext: CSFStory<JSX.Element> = () => {
  let toast1: Nullable<Toast>;
  let toast2: Nullable<Toast>;

  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Toast ref={el => (toast1 = el)} onClose={action('close')} onPush={action('push')} />
      <Toast ref={el => (toast2 = el)} onClose={action('close')} onPush={action('push')} />
      <div style={{ padding: '4px 200px 200px 4px' }} />
      <Button data-tid="firstButton" onClick={showToast1}>
        Show 1st toast
      </Button>
      <Button data-tid="secondButton" onClick={showToast2}>
        Show 2nd toast
      </Button>
    </div>
  );

  function showToast1() {
    if (toast1) {
      toast1.push('Toast with long name long long');
    }
  }

  function showToast2() {
    if (toast2) {
      toast2.push('Toast');
    }
  }
};

// BUG: –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≥–∞–π–¥–æ–≤:
// –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 —Ç–æ—Å—Ç. –ü–µ—Ä–µ–¥ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ—Å—Ç–∞, —Ç–µ–∫—É—â–∏–π —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ–≥–æ –ø–æ–∫–∞–∑–∞ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ.

// 0. –ö–Ω–æ–ø–∫–∞ 1 –≤—ã–∑—ã–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–æ—Å—Ç. –ö–Ω–æ–ø–∫–∞ 2 –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ—Å—Ç
// 1. –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É 1. –ù–∞–∂–∞—Ç—å –µ–µ, –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
// 2. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Ç–∞–π–º–µ—Ä–∞ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å 1 —Ç–æ—Å—Ç
// 3. –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É 2. –ù–∞–∂–∞—Ç—å –µ–µ, –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —Å–µ–∫
// 4. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Ç–∞–π–º–µ—Ä–∞ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å 2 —Ç–æ—Å—Ç (1 –ø—Ä–æ–ø–∞–ª)

ToastDissapearWhenNext.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const button1 = await this.browser.findElement({ css: '[data-tid~=firstButton]' });
          const button2 = await this.browser.findElement({ css: '[data-tid~=secondButton]' });

          await this.browser
            .actions({ bridge: true })
            .click(button1)
            .perform();

          const toast1 = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(button2)
            .perform();

          const toast2 = await element.takeScreenshot();

          await this.expect({ toast1, toast2 }).to.matchImages();
        },
      },
    },
  },
};

import { CSFStory } from 'creevey';
import React from 'react';

import { Checkbox } from '../../Checkbox'; // 9

export default { title: 'TR 1' };

export const ClickDisabled: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <Checkbox checked={value} onValueChange={updateValue} disabled>
      text
    </Checkbox>
  );
};
/**
 * Checkbox. –ö–ª–∏–∫ –ø–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —á–µ–∫–±–æ–∫—Å—É
 *
 * - üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 * - –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É
 * - üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
 */
ClickDisabled.story = {
  parameters: {
    creevey: {
      tests: {
        async clickDisabled() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const checkbox = await this.browser.findElement({ css: '[data-comp-name~=Checkbox]' });

          const idle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          const afterClicked = await element.takeScreenshot();

          await this.expect({ idle, afterClicked }).to.matchImages();
        },
      },
    },
  },
};

export const ClickCheckbox: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <Checkbox checked={value} onValueChange={updateValue}>
      text
    </Checkbox>
  );
};
/**
 * Checkbox. –°—Ç–∞–≤–∏–º –∏ —Å–Ω–∏–º–∞–µ–º –≥–∞–ª–æ—á–∫—É –∫–ª–∏–∫–æ–º
 *
 * - üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 * - –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É
 * - üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —á–µ–∫–±–æ–∫—Å‚Äù
 * - –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É
 * - üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–Ω–µ –≤—ã–±—Ä–∞–Ω —á–µ–∫–±–æ–∫—Å‚Äù
 */
ClickCheckbox.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const checkbox = await this.browser.findElement({ css: '[data-comp-name~=Checkbox]' });

          const idle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          const afterClicked = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          const afterTwoClicked = await element.takeScreenshot();

          await this.expect({ idle, afterClicked, afterTwoClicked }).to.matchImages();
        },
      },
    },
  },
};

export const WarningCheckbox: CSFStory<JSX.Element> = () => {
  const [checked, update] = React.useState(true);
  return (
    <Checkbox warning checked={checked} onValueChange={update}>
      text
    </Checkbox>
  );
};
/**
 * Checkbox. –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–≤—ã–±—Ä–∞–Ω" –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π "warning"
 *
 * - –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É
 * - üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–Ω–µ –≤—ã–±—Ä–∞–Ω —á–µ–∫–±–æ–∫—Å‚Äù
 */
WarningCheckbox.story = {
  parameters: {
    creevey: {
      tests: {
        async warningChecked() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const checkbox = await this.browser.findElement({ css: '[data-comp-name~=Checkbox]' });

          const idle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          const unchecked = await element.takeScreenshot();

          await this.expect({ idle, unchecked }).to.matchImages();
        },
      },
    },
  },
};


/* polunina*/


export const BasicCheckbox: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <Checkbox
      checked={value}
      onValueChange={updateValue}
    >
      text
    </Checkbox>
  )
};

/**
 *  CheckBox. –°–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è CheckBox
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ CheckBox
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *  5. –ù–∞–±–ª—é–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
 *
 *  Profit!
 */

BasicCheckbox.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected() {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: "#test-element" });
          // –Ω–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å
          const checkbox = await this.browser.findElement({ css: "[data-comp-name~=Checkbox]" });
          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();

          // 3. –Ω–∞–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏
          await this.browser
            .actions({ bridge: true })
            .move({ origin: checkbox })
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
          const afterClicked = await element.takeScreenshot();
          // 5. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await this.expect({ idle, afterClicked }).to.matchImages();
        }
      }
    }
  }
};

export const CheckboxLongValue: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <>
      <div>
        <Checkbox
          checked={value}
          onValueChange={updateValue}
        >
          long text long text long text long text long text long text long text long text long text long text long text long text long text long text long text long text long text long text long text long text long text long text long text long text
        </Checkbox>
      </div>
      <div>
        <Checkbox
          checked={value}
          onValueChange={updateValue}
        >
        </Checkbox>
      </div>
    </>
  )
};

/**
 *  CheckBox. –°–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–î–ª–∏–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –µ—â–µ –æ–¥–∏–Ω —á–µ–∫–±–æ–∫—Å‚Äù
 *
 *  0. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *
 *  Profit!
 */

CheckboxLongValue.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected() {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: "#test-element" });
          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();
          // 3. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await this.expect({ idle }).to.matchImages();
        }
      }
    }
  }
};

export const IndeterminateCheckbox: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <Checkbox
      checked={value}
      onValueChange={updateValue}
      initialIndeterminate
    >
      text
    </Checkbox>
  )
};

/**
 *  CheckBox. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –≤ checked
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è CheckBox
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ
 *  3. –ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ CheckBox
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúchecked‚Äù
 *  5. –ù–∞–±–ª—é–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 *
 *  Profit!
 */

IndeterminateCheckbox.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected() {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: "#test-element" });
          // –Ω–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å
          const checkbox = await this.browser.findElement({ css: "[data-comp-name~=Checkbox]" });
          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();

          // 3. –∫–ª–∏–∫–∞–µ–º –Ω–∞  checkbox
          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "checked"
          const afterClicked = await element.takeScreenshot();
          // 5. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await this.expect({ idle, afterClicked }).to.matchImages();
        }
      }
    }
  }
};

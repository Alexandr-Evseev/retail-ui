import { CSFStory } from 'creevey';
import React from 'react';

import { Checkbox } from '../../Checkbox'; // 1
import { Hint } from '../../Hint';

export default {
  title: 'TR 12',
};

/**
 *  Hint. –•–∏–Ω—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è TextWithHint
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ —Ö–∏–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
 *  4. üì∏ —Ö–∏–Ω—Ç –ø–æ—è–≤–∏–ª—Å—è
 *  5. –£–±—Ä–∞—Ç—å –∫—É—Ä—Å–æ—Ä —Å —ç–ª–µ–º–µ–Ω—Ç–∞
 *  6. üì∏ —Ö–∏–Ω—Ç –∏—Å—á–µ–∑
 *  Profit!
 */

export const SimpleHint: CSFStory<JSX.Element> = () => {
  return <Hint text="World">Hello</Hint>;
};
//–í storybook –Ω–µ –∞–Ω–∏–º–∏—Ä—É–µ—Ç—Å—è hint –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –Ω–µ–≥–æ

export const UnaryCheckbox: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <Checkbox checked={value} onValueChange={updateValue}>
      Check it out!
    </Checkbox>
  );
};

/**
 *  Checkbox. –•–æ–≤–µ—Ä –∏ —Å–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è CheckBox
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ —á–µ–∫–±–æ–∫—Å
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "hovered"
 *  5. –í—ã–±—Ä–∞—Ç—å —á–µ–∫–±–æ–∫—Å
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "checked"
 *  Profit!
 */

UnaryCheckbox.story = {
  parameters: {
    creevey: {
      tests: {
        async ChangeState() {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });

          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const uncheckedUnhovered = await element.takeScreenshot();

          // –Ω–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å
          const checkbox = await this.browser.findElement({ css: '[data-comp-name~=Checkbox]' });

          // 3. –Ω–∞–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏
          await this.browser
            .actions({ bridge: true })
            .move({ origin: checkbox })
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
          const hovered = await element.takeScreenshot();

          // 5. –≤—ã–±–∏—Ä–∞–µ–º —á–µ–∫–±–æ–∫—Å
          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          // 6. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —á–µ–∫–±–æ–∫—Å–∞
          const checked = await element.takeScreenshot();
          await this.expect({ uncheckedUnhovered, hovered, checked }).to.matchImages();
        },
      },
    },
  },
};

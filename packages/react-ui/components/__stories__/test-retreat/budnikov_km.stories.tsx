import { CreeveyStoryParams, CSFStory } from 'creevey';
import React from 'react';

import { Autocomplete } from '../../Autocomplete'; // 7

export default {
  title: 'TR budnikov_km',
};

export const BasicAutocomplete: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete source={['one', 'two', 'three']} value={value} onValueChange={updateValue} />
    </div>
  );
};

BasicAutocomplete.story = {
  parameters: {
    creevey: {
      tests: {
        /**
         *  Autocomplete. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞
         *
         *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
         *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
         *  3. –í–≤–µ—Å—Ç–∏ "ONE"
         *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ"
         *
         *  Profit!
         */
        async shouldSuggestCaseIndependent() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('ONE')
            .perform();

          const upperCaseTyped = await element.takeScreenshot();

          await this.expect({ typed: upperCaseTyped }).to.matchImages();
        },
        /**
         *  Autocomplete. –û–±—Ä–µ–∑–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã
         *
         *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
         *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
         *  3. –í–≤–µ—Å—Ç–∏ "   two   "
         *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ"
         *
         *  Profit!
         */
        async shouldIgnoreSpacesAfterOrBefore() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('   two   ')
            .perform();

          const typedWithSpaces = await element.takeScreenshot();

          await this.expect({ typed: typedWithSpaces }).to.matchImages();
        },
      },
    },
  },
};

/**/

export const AutocompleteWithScroll: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  const items = [];
  for (let i = 0; i < 20; i++) {
    items.push(`Abba ${i}`);
  }
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete source={items} value={value} onValueChange={updateValue} />
    </div>
  );
};

AutocompleteWithScroll.story = {
  parameters: {
    creevey: {
      tests: {
        /**
         *  Autocomplete. –ü—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∏–¥–µ–Ω —Å–∫—Ä–æ–ª–ª–±–∞—Ä
         *
         *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithScroll
         *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
         *  3. –í–≤–µ—Å—Ç–∏ "Abba"
         *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä–æ–ø–¥–∞—É–Ω–∞ —Å–æ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–º
         *
         *  Profit!
         */
        async scrollBarShouldBeVisible() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const autocomplete = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(autocomplete)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('Abba')
            .perform();

          const autocompleteWithScroll = await element.takeScreenshot();

          await this.expect({ autocompleteWithScroll }).to.matchImages();
        },
        /**
         *  Autocomplete. –°–∫—Ä–æ–ª–ª–±–∞—Ä —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
         *
         *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithScroll
         *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
         *  3. –í–≤–µ—Å—Ç–∏ "Abba"
         *  4. –ù–∞—Ö–æ–¥–∏–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
         *  5. –ù–∞–≤–æ–¥–∏–º –Ω–∞ –Ω–µ–≥–æ –º—ã—à—å
         *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ –≤ –¥—Ä–æ–ø–¥–∞—É–Ω–µ
         *
         *  Profit!
         */
        async scrollBarShouldEnlargeOnHover() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const autocomplete = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(autocomplete)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('Abba')
            .perform();

          const scrollBar = await this.browser.findElement({ className: 'react-ui-ejkfzu' });
          await this.browser
            .actions({ bridge: true })
            .move({ origin: scrollBar })
            .perform(); //Hover –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ IE11
          const scrollBarOnHover = await element.takeScreenshot();

          await this.expect({ scrollBarOnHover }).to.matchImages();
        },
      },
    },
  },
};

export const AutocompleteWithSelectAllOnFocus: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete
        source={['one', 'two', 'three']}
        value={value}
        selectAllOnFocus={true}
        onValueChange={updateValue}
      />
    </div>
  );
};

/**
 *  Autocomplete. –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —Ñ–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ –≤–ª–µ—á–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithSelectAllOnFocus
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  3. –í–≤–µ—Å—Ç–∏ "shouldSelectThisTextOnFocus"
 *  4. –ù–∞–∂–∞—Ç—å TAB –¥–ª—è –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ (–Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ Firefox)
 *  5. –ö–ª–∏–∫–∞–µ–º –≤–Ω–æ–≤—å –ø–æ –ø–æ–ª—é –≤–≤–æ–¥–∞
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
 *
 *  Profit!
 */

AutocompleteWithSelectAllOnFocus.story = {
  parameters: {
    creevey: {
      tests: {
        async shouldSelectTextOnFocus() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const autocomplete = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(autocomplete)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('shouldSelectThisTextOnFocus')
            .sendKeys(this.keys.TAB) //TODO: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Firefox, –Ω—É–∂–Ω–æ –ª–∏–±–æ –ø–æ –¥—Ä—É–≥–æ–º—É —Ç–µ—Ä—è—Ç—å —Ñ–æ–∫—É—Å, –ª–∏–±–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞ Firefox
            .perform();

          await this.browser
            .actions({ bridge: true })
            .click(autocomplete)
            .perform();

          const selectedOnFocus = await element.takeScreenshot();

          await this.expect({ selectedOnFocus }).to.matchImages();
        },
      },
    },
  },
};

/**
 *  Autocomplete. –¢–µ–∫—Å—Ç –≤–≤–æ–¥–∏—Ç—Å—è —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é / –ø–æ —Ü–µ–Ω—Ç—Ä—É
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithRightTextAlignment
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  3. –í–≤–µ—Å—Ç–∏ "text"
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
 *
 *  Profit!
 */

export const AutocompleteWithRightTextAlignment: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete align={'right'} source={['one', 'two', 'three']} value={value} onValueChange={updateValue} />
    </div>
  );
};

const textAlignmentTest: CreeveyStoryParams['tests'] = {
  async textShouldBeAligned() {
    const element = await this.browser.findElement({ css: '#test-element' });
    const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

    await this.browser
      .actions({ bridge: true })
      .click(input)
      .perform();

    await this.browser
      .actions({ bridge: true })
      .sendKeys('text')
      .perform();

    const typed = await element.takeScreenshot();
    await this.expect({ typed }).to.matchImages();
  },
};

AutocompleteWithRightTextAlignment.story = {
  parameters: {
    creevey: {
      tests: textAlignmentTest,
    },
  },
};

export const AutocompleteWithCenterTextAlignment: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete align={'center'} source={['one', 'two', 'three']} value={value} onValueChange={updateValue} />
    </div>
  );
};

AutocompleteWithCenterTextAlignment.story = {
  parameters: {
    creevey: {
      tests: textAlignmentTest,
    },
  },
};

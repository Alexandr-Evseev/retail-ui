import { CSFStory } from 'creevey';
import React from 'react';

import { Autocomplete } from '../../Autocomplete'; // 11

export default {
  title: 'TR skachko.e',
};

export const BasicAutocomplete: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete
        source={['first value', 'first one more time', 'second value', 'third value']}
        value={value}
        onValueChange={updateValue}
      />
    </div>
  );
};

/**
 *  Autocomplete. –í—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ Enter
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ —Ñ–æ–∫—É—Å–µ"
 *  3. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª "f"
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  5. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  7. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  8. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 *  Profit!
 */

/**
 *  Autocomplete. –ü—Ä–æ–ø–∞–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—à–∫–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª "f"
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  4. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª "s"
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚Äù
 *
 */

/**
 *  Autocomplete. –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–≤—É–º —Å–ª–æ–≤–∞–º
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "first value"
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  6. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 */

/**
 *  Autocomplete. –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "rst"
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  6. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 */

/**
 *  Autocomplete. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "rst"
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  6. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 */

/**
 *  Autocomplete. –ù–∞–∂–∞—Ç–∏–µ Enter –ø—Ä–∏ –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "first"
 *  3. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–Ω–µ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 */

BasicAutocomplete.story = {
  parameters: {
    creevey: {
      tests: {
        async wrongTyped() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('f')
            .perform();

          const typed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('x')
            .perform();

          const typedWrong = await element.takeScreenshot();

          await this.expect({ typed, typedWrong }).to.matchImages();
        },

        async severalWords() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('first value')
            .perform();

          const typed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ARROW_DOWN)
            .perform();

          const highlighted = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ENTER)
            .perform();

          const selected = await element.takeScreenshot();

          await this.expect({ typed, highlighted, selected }).to.matchImages();
        },

        async notFirstSymbol() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('rst')
            .perform();

          const typed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ARROW_DOWN)
            .perform();

          const highlighted = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ENTER)
            .perform();

          const selected = await element.takeScreenshot();

          await this.expect({ typed, highlighted, selected }).to.matchImages();
        },

        async saveTextOnBlur() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('first')
            .perform();

          const typed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.TAB)
            .perform();

          const noFocus = await element.takeScreenshot();

          await this.expect({ typed, noFocus }).to.matchImages();
        },

        async enterWhenNoSelectedItem() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          const empty = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('first')
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ENTER)
            .perform();

          const selected = await element.takeScreenshot();

          await this.expect({ empty, selected }).to.matchImages();
        },
      },
    },
  },
};

export const AutocompleteWithMask: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <Autocomplete
      source={['+79001234567', '+79002345678', '+790034567890', '+790092 3456789']}
      value={value}
      onValueChange={updateValue}
      mask="+79999999999"
    />
  );
};

/**
 *  Autocomplete. –ú–∞—Å–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithMask
 *  1. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–ª–µ –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ‚Äù
 *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–ª–µ –≤ —Ñ–æ–∫—É—Å–µ‚Äù
 *  4. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "900"
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú—á–∞—Å—Ç–∏—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Å–∫–∏‚Äù
 *
 */

/**
 *  Autocomplete. –í–≤–æ–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–¥ –º–∞—Å–∫—É —Å–∏–º–≤–æ–ª–∞
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithMask
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–ª–µ –≤ —Ñ–æ–∫—É—Å–µ‚Äù
 *  3. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª "a"
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *
 */

/**
 *  Autocomplete. –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª–∏–Ω–æ–π –±–æ–ª—å—à–µ –º–∞—Å–∫–∏
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithMask
 *  1. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "790034567890888"
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–º–∞—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∞‚Äù
 *
 */

/**
 *  Autocomplete. –í—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª–µ —Å –º–∞—Å–∫–æ–π
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithMask
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "900"
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç—å –º–∞—Å–∫–∏‚Äù
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  5. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 */

/**
 *  Autocomplete. –ü–æ–¥–≥–æ–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥ –º–∞—Å–∫—É (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, —Ç.–∫. –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ—Å—Ç "–í—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª–µ —Å –º–∞—Å–∫–æ–π")
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithMask
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "9009"
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç—å –º–∞—Å–∫–∏‚Äù
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  5. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç +79009234567
 *
 */

AutocompleteWithMask.story = {
  parameters: {
    creevey: {
      tests: {
        async showMask() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          const withMask = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('900')
            .perform();

          const partialMask = await element.takeScreenshot();

          await this.expect({ withMask, partialMask }).to.matchImages();
        },

        async incorrectInput() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          const withMask = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('9a')
            .perform();

          const partialMask = await element.takeScreenshot();

          await this.expect({ withMask, partialMask }).to.matchImages();
        },

        async tooLongInput() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          const withMask = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('90034567890888')
            .perform();

          const filledMask = await element.takeScreenshot();

          await this.expect({ withMask, filledMask }).to.matchImages();
        },

        // –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, —Ç.–∫. –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç this.keys.ARROW_DOWN
        //         async itemSelected() {
        //           const element = await this.browser.findElement({ css: '#test-element' });
        //           const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

        //           await this.browser
        //             .actions({ bridge: true })
        //             .click(input)
        //             .perform();

        //           const focused = await element.takeScreenshot();

        //           await this.browser
        //             .actions({ bridge: true })
        //             .sendKeys('900')
        //             .perform();

        //           const typed = await element.takeScreenshot();

        //           await this.browser
        //             .actions({ bridge: true })
        //             .sendKeys((this as any).keys.ARROW_DOWN)
        //             .perform();

        //           const highlighted = await element.takeScreenshot();

        //           await this.browser
        //             .actions({ bridge: true })
        //             .sendKeys(this.keys.ENTER)
        //             .perform();

        //           const selected = await element.takeScreenshot();

        //           await this.expect({ focused, typed, highlighted, selected }).to.matchImages();
        //         },
      },
    },
  },
};

export const AutocompleteWithWarning: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <Autocomplete source={['first value', 'second value']} value={value} onValueChange={updateValue} warning={true} />
  );
};

/**
 *  Autocomplete. –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithWarning
 *  1. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ –≤ —Ñ–æ–∫—É—Å–µ"
 *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ —Ñ–æ–∫—É—Å–µ"
 *  4. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª "f"
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  6. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  8. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  9. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 */

AutocompleteWithWarning.story = {
  parameters: {
    creevey: {
      tests: {
        async showWarning() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          const noFocus = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          const withFocus = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('f')
            .perform();

          const witnElements = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ARROW_DOWN)
            .perform();

          const highlighted = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ENTER)
            .perform();

          const valueSelected = await element.takeScreenshot();

          await this.expect({ noFocus, withFocus, witnElements, highlighted, valueSelected }).to.matchImages();
        },
      },
    },
  },
};

export const AutocompleteWithError: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <Autocomplete source={['first value', 'second value']} value={value} onValueChange={updateValue} error={true} />
  );
};

/**
 *  Autocomplete. –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithWarning
 *  1. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ –≤ —Ñ–æ–∫—É—Å–µ"
 *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ —Ñ–æ–∫—É—Å–µ"
 *  4. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª "f"
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  6. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  8. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  9. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 */

AutocompleteWithError.story = {
  parameters: {
    creevey: {
      tests: {
        async showError() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          const noFocus = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          const withFocus = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('f')
            .perform();

          const witnElements = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ARROW_DOWN)
            .perform();

          const highlighted = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ENTER)
            .perform();

          const valueSelected = await element.takeScreenshot();

          await this.expect({ noFocus, withFocus, witnElements, highlighted, valueSelected }).to.matchImages();
        },
      },
    },
  },
};

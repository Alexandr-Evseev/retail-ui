import { CSFStory } from 'creevey';
import React, { useRef, useState } from 'react';

import { Checkbox } from '../../Checkbox';
import { Button } from '../../Button';

export default {
  title: 'TR Checkbox',
};

export const ClickDisabled: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <Checkbox checked={value} onValueChange={updateValue} disabled>
      text
    </Checkbox>
  );
};
/**
 * Checkbox. –ö–ª–∏–∫ –ø–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —á–µ–∫–±–æ–∫—Å—É
 *
 * - üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 * - –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É
 * - üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
 */
ClickDisabled.story = {
  parameters: {
    creevey: {
      tests: {
        async clickDisabled() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const checkbox = await this.browser.findElement({ css: '[data-comp-name~=Checkbox]' });

          const idle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          const afterClicked = await element.takeScreenshot();

          await this.expect({ idle, afterClicked }).to.matchImages();
        },
      },
    },
  },
};

export const ClickCheckbox: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <Checkbox checked={value} onValueChange={updateValue}>
      text
    </Checkbox>
  );
};
/**
 * Checkbox. –°—Ç–∞–≤–∏–º –∏ —Å–Ω–∏–º–∞–µ–º –≥–∞–ª–æ—á–∫—É –∫–ª–∏–∫–æ–º
 *
 * - üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 * - –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É
 * - üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —á–µ–∫–±–æ–∫—Å‚Äù
 * - –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É
 * - üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–Ω–µ –≤—ã–±—Ä–∞–Ω —á–µ–∫–±–æ–∫—Å‚Äù
 */
ClickCheckbox.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const checkbox = await this.browser.findElement({ css: '[data-comp-name~=Checkbox]' });

          const idle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          const afterClicked = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          const afterTwoClicked = await element.takeScreenshot();

          await this.expect({ idle, afterClicked, afterTwoClicked }).to.matchImages();
        },
      },
    },
  },
};

export const WarningCheckbox: CSFStory<JSX.Element> = () => {
  const [checked, update] = React.useState(true);
  return (
    <Checkbox warning checked={checked} onValueChange={update}>
      text
    </Checkbox>
  );
};
/**
 * Checkbox. –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–≤—ã–±—Ä–∞–Ω" –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π "warning"
 *
 * - –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É
 * - üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–Ω–µ –≤—ã–±—Ä–∞–Ω —á–µ–∫–±–æ–∫—Å‚Äù
 */
WarningCheckbox.story = {
  parameters: {
    creevey: {
      tests: {
        async warningChecked() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const checkbox = await this.browser.findElement({ css: '[data-comp-name~=Checkbox]' });

          const idle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          const unchecked = await element.takeScreenshot();

          await this.expect({ idle, unchecked }).to.matchImages();
        },
      },
    },
  },
};

/* polunina*/

export const BasicCheckbox: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <Checkbox checked={value} onValueChange={updateValue}>
      text
    </Checkbox>
  );
};

/**
 *  CheckBox. –°–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è CheckBox
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ CheckBox
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *  5. –ù–∞–±–ª—é–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
 *
 *  Profit!
 */

BasicCheckbox.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected() {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });
          // –Ω–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å
          const checkbox = await this.browser.findElement({ css: '[data-comp-name~=Checkbox]' });
          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();

          // 3. –Ω–∞–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏
          await this.browser
            .actions({ bridge: true })
            .move({ origin: checkbox })
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
          const afterClicked = await element.takeScreenshot();
          // 5. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await this.expect({ idle, afterClicked }).to.matchImages();
        },
      },
    },
  },
};

export const CheckboxLongValue: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <>
      <div>
        <Checkbox checked={value} onValueChange={updateValue}>
          long text long text long text long text long text long text long text long text long text long text long text
          long text long text long text long text long text long text long text long text long text long text long text
          long text long text
        </Checkbox>
      </div>
      <div>
        <Checkbox checked={value} onValueChange={updateValue}></Checkbox>
      </div>
    </>
  );
};

/**
 *  CheckBox. –°–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–î–ª–∏–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –µ—â–µ –æ–¥–∏–Ω —á–µ–∫–±–æ–∫—Å‚Äù
 *
 *  0. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *
 *  Profit!
 */

CheckboxLongValue.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected() {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });
          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();
          // 3. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await this.expect({ idle }).to.matchImages();
        },
      },
    },
  },
};

export const IndeterminateCheckbox: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <Checkbox checked={value} onValueChange={updateValue} initialIndeterminate>
      text
    </Checkbox>
  );
};

/**
 *  CheckBox. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –≤ checked
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è CheckBox
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ
 *  3. –ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ CheckBox
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúchecked‚Äù
 *  5. –ù–∞–±–ª—é–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 *
 *  Profit!
 */

IndeterminateCheckbox.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected() {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });
          // –Ω–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å
          const checkbox = await this.browser.findElement({ css: '[data-comp-name~=Checkbox]' });
          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();

          // 3. –∫–ª–∏–∫–∞–µ–º –Ω–∞  checkbox
          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "checked"
          const afterClicked = await element.takeScreenshot();
          // 5. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await this.expect({ idle, afterClicked }).to.matchImages();
        },
      },
    },
  },
};

export const CheckBoxStates: CSFStory<JSX.Element> = () => {
  const [checked, setChecked] = useState<boolean>(false);
  const checkbox = useRef<Checkbox>(null);

  const handleChangeIndeterminate = () => {
    const currentCheckBox = checkbox?.current;
    if (currentCheckBox?.state.indeterminate) {
      currentCheckBox?.resetIndeterminate();
    } else {
      currentCheckBox?.setIndeterminate();
    }
  };

  return (
    <section>
      <Checkbox ref={checkbox} checked={checked} onClick={() => setChecked(!checked)} />
      <br />
      <br />
      <Button onClick={handleChangeIndeterminate}>–ò–∑–º–µ–Ω–∏—Ç—å initialIndeterminate</Button>
    </section>
  );
};

/**
 *  CheckBox.
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è CheckBoxDefault
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. hover
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ hovered
 *  4. click
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ clicked
 *  7. indeterminate
 *  8. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ indeterminate
 *  9. reset indeterminate
 *  10. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ reset indeterminate
 *
 */

CheckBoxStates.story = {
  parameters: {
    creevey: {
      tests: {
        async states() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const checkbox = await this.browser.findElement({ css: '[data-comp-name~=Checkbox]' });
          const button = await this.browser.findElement({ css: 'button' });

          const idle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: checkbox })
            .perform();
          const hover = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();
          const checked = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();
          const unChecked = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(button)
            .perform();
          const setInitialIndeterminate = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(button)
            .perform();
          const resetInitialIndeterminate = await element.takeScreenshot();

          await this.expect({
            idle,
            hover,
            checked,
            unChecked,
            setInitialIndeterminate,
            resetInitialIndeterminate,
          }).to.matchImages();
        },
      },
    },
  },
};

class CheckboxWithErrorClass extends React.Component<any, any> {
  public state = {
    checked: false,
    error: true,
  };

  public render() {
    const { checked, error } = this.state;
    return (
      <Checkbox error={error} onValueChange={() => this.setState({ checked: !checked })} checked={checked}>
        {this.props.children}
      </Checkbox>
    );
  }
}

export const CheckboxWithError: CSFStory<JSX.Element> = () => (
  <CheckboxWithErrorClass>CheckboxWithError</CheckboxWithErrorClass>
);
CheckboxWithError.story = {
  name: 'checkboxWithError',
  parameters: {
    creevey: {
      skip: [{ in: ['ie11', 'ie11Flat'], tests: 'hovered' }],
      tests: {
        async idle() {
          await this.expect(await this.takeScreenshot()).to.matchImage('idle');
        },
        async hovered() {
          await this.browser
            .actions({
              bridge: true,
            })
            .move({
              origin: this.browser.findElement({ css: 'span' }),
            })
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('hovered');
        },
        async clicked() {
          await this.browser
            .actions({
              bridge: true,
            })
            .click(this.browser.findElement({ css: 'span' }))
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('clicked');
        },
        async tabPress() {
          await this.browser
            .actions({
              bridge: true,
            })
            .click(this.browser.findElement({ css: 'span' }))
            .perform();
          await this.browser
            .actions({
              bridge: true,
            })
            .move({ origin: this.browser.findElement({ css: 'body' }) })
            .press()
            .release()
            .sendKeys(this.keys.TAB)
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('tabPress');
        },
        async spacePressAfterClick() {
          await this.browser
            .actions({
              bridge: true,
            })
            .click(this.browser.findElement({ css: '#test-element' }))
            .perform();
          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.SPACE)
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('spacePress');
        },
        async doubleSpacePressAfterClick() {
          await this.browser
            .actions({
              bridge: true,
            })
            .click(this.browser.findElement({ css: '#test-element' }))
            .perform();
          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.SPACE)
            .perform();
          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.SPACE)
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('doubleSpacePress');
        },
      },
    },
  },
};

class CheckboxWithTextClass extends React.Component<any, any> {
  public state = {
    checked: false,
  };

  public render() {
    const { checked } = this.state;
    return (
      <Checkbox onValueChange={() => this.setState({ checked: !checked })} checked={checked}>
        {this.props.children}
      </Checkbox>
    );
  }
}

export const CheckboxWithText: CSFStory<JSX.Element> = () => (
  <CheckboxWithTextClass>
    <div data-tid="text">CheckboxWithText</div>
  </CheckboxWithTextClass>
);

/**
 *  Checkbox.
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è CheckboxWithText
 *  1. –ù–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–µ–∫—Å—Ç —É —á–µ–∫–±–æ–∫—Å–∞
 *  2. –§–æ–∫—É—Å –Ω–∞ —Ç–µ–∫—Å—Ç —á–µ–∫–±–æ–∫—Å–∞
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ –≤—ã–±—Ä–∞–Ω –∏ –≤ —Ñ–æ–∫—É—Å–µ"
 *  4. –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç —á–µ–∫–±–æ—Å–∞
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–∞–∂–∞—Ç –∏ –≤—ã–±—Ä–∞–Ω"
 *  6. –û—Ç–∂–∏–º–∞–µ–º
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±—Ä–∞–Ω –∏ –≤ —Ñ–æ–∫—É—Å–µ"
 *  8. –°–Ω–∏–º–∞–µ–º —Ñ–æ–∫—É—Å
 *  9. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±—Ä–∞–Ω –∏ –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ"
 *
 *  Profit!
 */

CheckboxWithText.story = {
  parameters: {
    creevey: {
      tests: {
        async idle() {
          await this.expect(await this.takeScreenshot()).to.matchImage('idle');
        },
        async hoverOnLabel() {
          const label = await this.browser.findElement({ css: '[data-tid~=text]' });
          await this.browser
            .actions({
              bridge: true,
            })
            .move({
              origin: label,
            })
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('hoverOnLabel');
        },
      },
    },
  },
};

class CheckboxWithIndeterminateState1 extends React.Component<any, any> {
  state = {
    checked: false,
    initialIndeterminate: true,
  };

  public render() {
    const { checked, initialIndeterminate } = this.state;
    return (
      <Checkbox
        initialIndeterminate={initialIndeterminate}
        onValueChange={() => this.setState({ checked: !checked })}
        checked={checked}
      >
        {this.props.children}
      </Checkbox>
    );
  }
}

export const SimpleCheckbox: CSFStory<JSX.Element> = () => (
  <CheckboxWithIndeterminateState1>Click me </CheckboxWithIndeterminateState1>
);

CheckboxWithText.story = {
  parameters: {
    creevey: {
      tests: {
        async idle() {
          await this.expect(await this.takeScreenshot()).to.matchImage('idle');
        },
        async hoverOnLabel() {
          const label = await this.browser.findElement({ css: '[data-tid~=text]' });
          await this.browser
            .actions({
              bridge: true,
            })
            .move({
              origin: label,
            })
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('hoverOnLabel');
        },
        async pressOnLabel() {
          const label = await this.browser.findElement({ css: '[data-tid~=text]' });
          await this.browser
            .actions({
              bridge: true,
            })
            .move({
              origin: label,
            })
            .press(0)
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('pressOnLabel');
        },
        async stayHoveredAfterCheck() {
          const label = await this.browser.findElement({ css: '[data-tid~=text]' });
          await this.browser
            .actions({
              bridge: true,
            })
            .click(label)
            .move({
              origin: label,
            })
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('stayHoveredAfterCheck');
        },
        async stayHoveredAfterUncheck() {
          const label = await this.browser.findElement({ css: '[data-tid~=text]' });
          await this.browser
            .actions({
              bridge: true,
            })
            .move({
              origin: label,
            })
            .click(label)
            .click(label)
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('stayHoveredAfterUncheck');
        },
        async pressWhenChecked() {
          const label = await this.browser.findElement({ css: '[data-tid~=text]' });
          await this.browser
            .actions({
              bridge: true,
            })
            .click(label)
            .move({
              origin: label,
            })
            .press()
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('pressWhenChecked');
        },
        async unhoveredWhenUncheckAfterMoveOver() {
          const label = await this.browser.findElement({ css: '[data-tid~=text]' });
          await this.browser
            .actions({
              bridge: true,
            })
            .move({
              origin: label,
            })
            .click(label)
            .click(label)
            .move({ origin: this.browser.findElement({ css: 'body' }) })
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('unhoveredWhenUncheckAfterMoveOver');
        },
        async stayUncheckedAfterDragAndDrop() {
          const label = await this.browser.findElement({ css: '[data-tid~=text]' });
          await this.browser
            .actions({
              bridge: true,
            })
            .move({
              origin: label,
            })
            .press(0)
            .move({ origin: this.browser.findElement({ css: 'body' }) })
            .release(0)
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('stayUncheckedAfterDragAndDrop');
        },
        async stayCheckedAfterDragAndDrop() {
          const label = await this.browser.findElement({ css: '[data-tid~=text]' });
          await this.browser
            .actions({
              bridge: true,
            })
            .move({
              origin: label,
            })
            .click(label)
            .press(0)
            .move({ origin: this.browser.findElement({ css: 'body' }) })
            .release(0)
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('stayCheckedAfterDragAndDrop');
        },
      },
    },
  },
};

export const UnaryCheckbox: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState(false);
  return (
    <Checkbox checked={value} onValueChange={updateValue}>
      Check it out!
    </Checkbox>
  );
};

/**
 *  Checkbox. –•–æ–≤–µ—Ä –∏ —Å–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è CheckBox
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ —á–µ–∫–±–æ–∫—Å
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "hovered"
 *  5. –í—ã–±—Ä–∞—Ç—å —á–µ–∫–±–æ–∫—Å
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "checked"
 *  Profit!
 */

UnaryCheckbox.story = {
  parameters: {
    creevey: {
      tests: {
        async ChangeState() {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });

          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const uncheckedUnhovered = await element.takeScreenshot();

          // –Ω–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å
          const checkbox = await this.browser.findElement({ css: '[data-comp-name~=Checkbox]' });

          // 3. –Ω–∞–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏
          await this.browser
            .actions({ bridge: true })
            .move({ origin: checkbox })
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
          const hovered = await element.takeScreenshot();

          // 5. –≤—ã–±–∏—Ä–∞–µ–º —á–µ–∫–±–æ–∫—Å
          await this.browser
            .actions({ bridge: true })
            .click(checkbox)
            .perform();

          // 6. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —á–µ–∫–±–æ–∫—Å–∞
          const checked = await element.takeScreenshot();
          await this.expect({ uncheckedUnhovered, hovered, checked }).to.matchImages();
        },
      },
    },
  },
};

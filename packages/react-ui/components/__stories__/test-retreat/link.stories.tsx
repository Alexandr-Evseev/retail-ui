import { CSFStory, CreeveyStoryParams } from 'creevey';
import React from 'react';

import { Link } from '../../Link'; // 2
import { OkIcon } from '../../../internal/icons/16px';
import { Toast } from '../../Toast';

export default { title: 'TR Link' };

export const Simple_link: CSFStory<JSX.Element> = () => <Link>Very Simple Link</Link>;
Simple_link.story = {
  parameters: {
    creevey: {
      tests: {
        async hover() {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });

          // –Ω–∞—Ö–æ–¥–∏–º link
          const link = await this.browser.findElement({ css: '[data-comp-name*=Link]' });

          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();

          // 3. –Ω–∞–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏
          await this.browser
            .actions({ bridge: true })
            .move({ origin: link })
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
          const hover = await element.takeScreenshot();

          // 5. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await this.expect({ idle, hover }).to.matchImages();
        },
      },
    },
  },
};

export const Link_WithOnClick: CSFStory<JSX.Element> = () => (
  <Link onClick={() => Toast.push('RUN!')}>Another Simple Link</Link>
);
Link_WithOnClick.story = {
  parameters: {
    creevey: {
      tests: {
        async hover() {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });

          // –Ω–∞—Ö–æ–¥–∏–º link
          const link = await this.browser.findElement({ css: '[data-comp-name*=Link]' });

          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();

          // 3. –Ω–∞–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏
          await this.browser
            .actions({ bridge: true })
            .move({ origin: link })
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
          const hover = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(link)
            .perform();

          // –ù–∞—Ö–æ–¥–∏–º —Ç–æ—Å—Ç
          const toast_element = await this.browser.findElement({ css: '[data-tid*=ToastView__root]' });

          // 5. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –∫–ª–∏–∫–µ"
          const toast = await toast_element.takeScreenshot();

          // 6. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await this.expect({ idle, hover, toast }).to.matchImages();
        },
      },
    },
  },
};

export const LinkDefault: CSFStory<JSX.Element> = () => {
  return <Link>Enabled</Link>;
};

export const LinkWithIcon: CSFStory<JSX.Element> = () => {
  return <Link icon={<OkIcon />}>OK</Link>;
};

export const LinkWithSpaces: CSFStory<JSX.Element> = () => {
  return <Link>Link with spaces</Link>;
};

export const LinkSuccess: CSFStory<JSX.Element> = () => {
  return <Link use="success">Link with spaces</Link>;
};

export const LinkDanger: CSFStory<JSX.Element> = () => {
  return <Link use="danger">Link with spaces</Link>;
};

export const LinkGrayed: CSFStory<JSX.Element> = () => {
  return <Link use="grayed">Link with spaces</Link>;
};

/**
 * Link
 *
 * 0. –ò—Å—Ç–æ—Ä–∏–∏ Link*
 * 1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * 2. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * 3. –ù–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å—Å—ã–ª–∫—É
 * 4. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è hover
 * 5. –ù–∞–∂–∞—Ç—å –Ω–∞ —Å—Å—ã–ª–∫—É
 * 6. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è pressed/mouseDown
 * 7. –û—Ç–ø—É—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É
 * 8. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è hover
 */

const linkTests: CreeveyStoryParams['tests'] = {
  async pressedThenReleased() {
    const element = await this.browser.findElement({ css: '#test-element' });
    const link = await this.browser.findElement({ css: '[data-comp-name~=Link]' });

    const idle = await element.takeScreenshot();

    await this.browser
      .actions({ bridge: true })
      .move({ origin: link })
      .perform();

    const hover = await element.takeScreenshot();

    await this.browser
      .actions({ bridge: true })
      .press()
      .perform();

    const pressed = await element.takeScreenshot();

    await this.browser
      .actions({ bridge: true })
      .release()
      .perform();

    const released = await element.takeScreenshot();

    await this.expect({ idle, hover, pressed, released }).to.matchImages();
  },
  async focused() {
    const element = await this.browser.findElement({ css: '#test-element' });

    await this.browser
      .actions({ bridge: true })
      .sendKeys(this.keys.TAB)
      .perform();

    const focused = await element.takeScreenshot();

    await this.expect({ focused }).to.matchImages();
  },
};

LinkDefault.story = { parameters: { creevey: { tests: linkTests } } };

LinkWithIcon.story = { parameters: { creevey: { tests: linkTests } } };

LinkWithSpaces.story = { parameters: { creevey: { tests: linkTests } } };

LinkSuccess.story = { parameters: { creevey: { tests: linkTests } } };

LinkDanger.story = { parameters: { creevey: { tests: linkTests } } };

LinkGrayed.story = { parameters: { creevey: { tests: linkTests } } };

/**
 * Link
 *
 * 0. –ò—Å—Ç–æ—Ä–∏—è LinkDisabled
 * 1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * 2. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–¥–∏–∑–∞–±–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * 3. –ù–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å—Å—ã–ª–∫—É
 * 4. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è hover
 */

export const LinkDisabled: CSFStory<JSX.Element> = () => {
  return <Link disabled={true}>Disabled</Link>;
};

LinkDisabled.story = {
  parameters: {
    creevey: {
      tests: {
        async hover() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const link = await this.browser.findElement({ css: '[data-comp-name~=Link]' });

          const idle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: link })
            .perform();

          const hover = await element.takeScreenshot();

          await this.expect({ idle, hover }).to.matchImages();
        },
      },
    },
  },
};

export const BasicLink: CSFStory<JSX.Element> = () => {
  return (
    <div style={{ marginTop: '20px' }}>
      <Link href="#">Base link</Link>
    </div>
  );
};

/**
 *  Link. –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicLink
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Å—Å—ã–ª–∫—É
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "hover"
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É MOUSE_DOWN
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–∑–∞–∂–∞—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏‚Äù
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É MOUSE_UP
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ‚Äù
 *
 *  Profit!
 */

BasicLink.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const link = await this.browser.findElement({ css: 'a' });

          const started = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: link })
            .perform();

          const hovered = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .press()
            .perform();

          const pressed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click()
            .perform();

          const clicked = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ x: 0, y: 0 })
            .perform();

          const activated = await element.takeScreenshot();

          await this.expect({ started, hovered, pressed, clicked, activated }).to.matchImages();
        },
      },
    },
  },
};

import { CSFStory } from 'creevey';
import React from 'react';

import { Tabs } from '../../Tabs'; // 4

export default {
  title: 'TR Tabs',
};

export const SimpleTabs: CSFStory<JSX.Element> = () => {
  const initialState = 'first';
  const [current, currentSet] = React.useState(initialState);
  const changeHandler = (value: string) => currentSet(value);

  return (
    <Tabs value={current} onValueChange={changeHandler}>
      <Tabs.Tab id="first">first</Tabs.Tab>
      <Tabs.Tab disabled id="second">
        second (disabled)
      </Tabs.Tab>
      <Tabs.Tab id="third">third</Tabs.Tab>
    </Tabs>
  );
};

/**
 * Tabs. –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ–≥–æ —Ç–∞–±–∞
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicToggle
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ —Ç–∞–±
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *  5. –§–æ–∫—É—Å –Ω–∞ —Ç–∞–±–µ
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ —Ñ–æ–∫—É—Å–µ"
 *  7. –ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Ç–∞–±
 *  8. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤–∫–ª—é—á–µ–Ω"
 *
 *  Profit!
 */

SimpleTabs.story = {
  parameters: {
    creevey: {
      tests: {
        async selectTab() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const thirdTab = await this.browser.findElement({ css: 'a[data-prop-id~=third]' });

          const defaultToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: thirdTab })
            .perform();

          const hoverTab = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(thirdTab)
            .perform();

          const activeTabChanged = await element.takeScreenshot();

          await this.expect({ defaultToggle, hoverTab, activeTabChanged }).to.matchImages();
        },

        async selectDisabledTab() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const secondTab = await this.browser.findElement({ css: 'a[data-prop-id~=second]' });

          const defaultToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: secondTab })
            .perform();

          const hoverTab = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(secondTab)
            .perform();

          const activeTabChanged = await element.takeScreenshot();

          await this.expect({ defaultToggle, hoverTab, activeTabChanged }).to.matchImages();
        },

        async selectActiveTab() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const firstTab = await this.browser.findElement({ css: 'a[data-prop-id~=first]' });

          const defaultToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: firstTab })
            .perform();

          const hoverTab = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(firstTab)
            .perform();

          const activeTabChanged = await element.takeScreenshot();

          await this.expect({ defaultToggle, hoverTab, activeTabChanged }).to.matchImages();
        },
      },
    },
  },
};

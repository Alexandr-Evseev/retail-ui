import { action } from '@storybook/addon-actions';
import { CSFStory } from 'creevey';
import React, { useRef, useState } from 'react';

export default { title: 'TR Toggle' };
import { Toggle } from '../../Toggle'; // 1
export const UncontrolledToggle: CSFStory<JSX.Element> = () => <Toggle onValueChange={action('toggle')} />;

/**
 *  UncontrolledToggle.
 *
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. hover
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ hovered
 *  4. click
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ checked
 *  7. un-hovered
 *  8. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ un-hovered
 *  9. click
 *  10. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ un-checked
 *
 */

UncontrolledToggle.story = {
  parameters: {
    creevey: {
      tests: {
        async hover() {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });
          const root = await this.browser.findElement({ css: '#root' });
          // –Ω–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
          const toggle = await this.browser.findElement({ css: '[data-comp-name*=Toggle]' });
          const toggle_checkbox = await this.browser.findElement({ css: '[data-prop-type*=checkbox]' });

          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();

          // 3. –Ω–∞–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏
          await this.browser
            .actions({ bridge: true })
            .move({ origin: toggle })
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
          const hover = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(toggle_checkbox)
            .perform();

          // –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ —á–µ–∫–µ"
          const check_on = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: root })
            .perform();

          // –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–±–µ–∑ —Ö–æ–≤–µ—Ä–∞"
          const hover_off = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(toggle_checkbox)
            .perform();

          // –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –∞–Ω—á–µ–∫–µ"
          const check_off = await element.takeScreenshot();

          // 5. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await this.expect({ idle, hover, check_on, hover_off, check_off }).to.matchImages();
        },
      },
    },
  },
};

class Simple extends React.Component<any, any> {
  public state = {
    checked: true,
  };

  public render() {
    return (
      <div>
        <Toggle
          checked={this.state.checked}
          onValueChange={() => {
            const { checked } = this.state;
            this.setState({ checked: !checked });
          }}
        />{' '}
        {this.state.checked ? 'On' : 'Off'}
      </div>
    );
  }
}

export const Plain: CSFStory<JSX.Element> = () => <Simple />;
Plain.story = {
  name: 'plain',
  parameters: {
    creevey: {
      tests: {
        async hover() {
          await this.browser
            .actions({
              bridge: true,
            })
            .move({ origin: this.browser.findElement({ css: '[data-comp-name~=Toggle]' }) })
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('hover');
        },
        async focused() {
          await this.browser
            .actions({
              bridge: true,
            })
            .sendKeys(this.keys.TAB)
            .perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('focused');
        },
      },
    },
  },
};

export const BasicToggle: CSFStory<JSX.Element> = () => {
  const initialState = false;
  const [checked, checkSet] = React.useState(initialState);
  const toggleCheck = () => {
    checkSet(!checked);
  };
  return (
    <div>
      <Toggle checked={checked} onChange={toggleCheck} /> {checked ? 'On' : 'Off'}
    </div>
  );
};

/**
 * Toggle. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicToggle
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *  5. –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ —Ñ–æ–∫—É—Å–µ"
 *  7. –ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
 *  8. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤–∫–ª—é—á–µ–Ω"
 *  Profit!
 */

BasicToggle.story = {
  parameters: {
    creevey: {
      tests: {
        async toggleItem() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const inputLabel = await this.browser.findElement({ css: 'label' });

          const defaultToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: inputLabel })
            .perform();

          const hoverToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: inputLabel })
            .press()
            .perform();

          const focusToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(inputLabel)
            .perform();

          const toggled = await element.takeScreenshot();

          await this.expect({ defaultToggle, hoverToggle, focusToggle, toggled }).to.matchImages();
        },
      },
    },
  },
};

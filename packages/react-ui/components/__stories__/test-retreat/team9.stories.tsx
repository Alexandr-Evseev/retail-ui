import { CSFStory } from 'creevey';
import React from 'react';
import { WebDriver } from 'selenium-webdriver';
import until from 'selenium-webdriver/lib/until';

import { Button } from '../../Button';
import { Link } from '../../Link'; // 1
import { Tabs } from '../../Tabs'; // 3
import { Toast } from '../../Toast'; // 2
import { Toggle } from '../../Toggle'; // 1

export default {
  title: 'TR 9',
};

// Utils

/**
 * –û–∂–∏–¥–∞–µ—Ç, –ø–æ–∫–∞ –ø—Ä–æ–π–¥—ë—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –º–∏–ª–∏—Å–µ–∫—É–Ω–¥
 *
 * @param driver
 * @param msTime
 */
async function sleep(driver: WebDriver, msTime: number) {
  let isDone = false;
  setTimeout(() => (isDone = true), msTime);
  await driver.wait(() => isDone, msTime);
}

export const BasicLink: CSFStory<JSX.Element> = () => {
  return (
    <div style={{ marginTop: '20px' }}>
      <Link href="#">Base link</Link>
    </div>
  );
};

/**
 *  Link. –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicLink
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Å—Å—ã–ª–∫—É
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "hover"
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É MOUSE_DOWN
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–∑–∞–∂–∞—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏‚Äù
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É MOUSE_UP
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ‚Äù
 *
 *  Profit!
 */

BasicLink.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const link = await this.browser.findElement({ css: 'a' });

          const started = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: link })
            .perform();

          const hovered = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .press()
            .perform();

          const pressed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click()
            .perform();

          const clicked = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ x: 0, y: 0 })
            .perform();

          const activated = await element.takeScreenshot();

          await this.expect({ started, hovered, pressed, clicked, activated }).to.matchImages();
        },
      },
    },
  },
};

export const BasicToggle: CSFStory<JSX.Element> = () => {
  const initialState = false;
  const [checked, checkSet] = React.useState(initialState);
  const toggleCheck = () => {
    checkSet(!checked);
  };
  return (
    <div>
      <Toggle checked={checked} onChange={toggleCheck} /> {checked ? 'On' : 'Off'}
    </div>
  );
};

/**
 * Toggle. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicToggle
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *  5. –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ —Ñ–æ–∫—É—Å–µ"
 *  7. –ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
 *  8. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤–∫–ª—é—á–µ–Ω"
 *  Profit!
 */

BasicToggle.story = {
  parameters: {
    creevey: {
      tests: {
        async toggleItem() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const inputLabel = await this.browser.findElement({ css: 'label' });

          const defaultToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: inputLabel })
            .perform();

          const hoverToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: inputLabel })
            .press()
            .perform();

          const focusToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(inputLabel)
            .perform();

          const toggled = await element.takeScreenshot();

          await this.expect({ defaultToggle, hoverToggle, focusToggle, toggled }).to.matchImages();
        },
      },
    },
  },
};

export const SimpleTabs: CSFStory<JSX.Element> = () => {
  const initialState = 'first';
  const [current, currentSet] = React.useState(initialState);
  const changeHandler = (value: string) => currentSet(value);

  return (
    <Tabs value={current} onValueChange={changeHandler}>
      <Tabs.Tab id="first">first</Tabs.Tab>
      <Tabs.Tab disabled id="second">
        second (disabled)
      </Tabs.Tab>
      <Tabs.Tab id="third">third</Tabs.Tab>
    </Tabs>
  );
};

/**
 * Tabs. –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ–≥–æ —Ç–∞–±–∞
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicToggle
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ —Ç–∞–±
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *  5. –§–æ–∫—É—Å –Ω–∞ —Ç–∞–±–µ
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ —Ñ–æ–∫—É—Å–µ"
 *  7. –ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Ç–∞–±
 *  8. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤–∫–ª—é—á–µ–Ω"
 *
 *  Profit!
 */

SimpleTabs.story = {
  parameters: {
    creevey: {
      tests: {
        async selectTab() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const thirdTab = await this.browser.findElement({ css: 'a[data-prop-id~=third]' });

          const defaultToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: thirdTab })
            .perform();

          const hoverTab = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(thirdTab)
            .perform();

          const activeTabChanged = await element.takeScreenshot();

          await this.expect({ defaultToggle, hoverTab, activeTabChanged }).to.matchImages();
        },

        async selectDisabledTab() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const secondTab = await this.browser.findElement({ css: 'a[data-prop-id~=second]' });

          const defaultToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: secondTab })
            .perform();

          const hoverTab = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(secondTab)
            .perform();

          const activeTabChanged = await element.takeScreenshot();

          await this.expect({ defaultToggle, hoverTab, activeTabChanged }).to.matchImages();
        },

        async selectActiveTab() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const firstTab = await this.browser.findElement({ css: 'a[data-prop-id~=first]' });

          const defaultToggle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: firstTab })
            .perform();

          const hoverTab = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(firstTab)
            .perform();

          const activeTabChanged = await element.takeScreenshot();

          await this.expect({ defaultToggle, hoverTab, activeTabChanged }).to.matchImages();
        },
      },
    },
  },
};

export const ComplexToast: CSFStory<JSX.Element> = () => {
  function showComplexNotification() {
    Toast.push('Successfully saved', {
      label: 'Cancel',
      handler: () => Toast.push('Canceled'),
    });
  }

  return (
    <div style={{ height: '100px', width: '100vw' }} id="test-element-wrapper">
      <Button onClick={showComplexNotification}>Show notification</Button>
    </div>
  );
};

/**
 * ComplexToast. –¢–æ—Å—Ç —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
 *
 * 0. –ò—Å—Ç–æ—Ä–∏—è showToast
 * 1. –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª –≤—ã–∑–æ–≤–∞ —Ç–æ—Å—Ç–∞
 * 2. –ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—É
 * 3. üì∏ —Ç–æ—Å—Ç –ø–æ—è–≤–∏–ª—Å—è
 *
 * 0. –ò—Å—Ç–æ—Ä–∏—è hideToast
 * 1. –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª –≤—ã–∑–æ–≤–∞ —Ç–æ—Å—Ç–∞
 * 2. –ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—É
 * 3. –¢–æ—Å—Ç –ø–æ—è–≤–∏–ª—Å—è
 * 4. üì∏ —Å–ø—É—Å—Ç—è 7—Å–µ–∫ —Ç–æ—Å—Ç –∑–∞–∫—Ä—ã–ª—Å—è
 * 5. –ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—É
 * 6. –¢–æ—Å—Ç –ø–æ—è–≤–∏–ª—Å—è
 * 7. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ —Ç–æ—Å—Ç
 * 8. üì∏ —Å–ø—É—Å—Ç—è 7—Å–µ–∫ —Ç–æ—Å—Ç –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è
 *
 *  Profit!
 */

ComplexToast.story = {
  parameters: {
    creevey: {
      tests: {
        async showToast() {
          const element = await this.browser.findElement({ css: '#test-element-wrapper' });
          const toastControl = await this.browser.findElement({ css: 'button' });

          await this.browser
            .actions({ bridge: true })
            .click(toastControl)
            .perform();

          await this.browser.wait(until.elementLocated({ css: '[data-tid~="ToastView__root"]' }), 3000);
          const toastToggled = await element.takeScreenshot();

          await this.expect({ toastToggled }).to.matchImages();
        },

        async hideToast() {
          const element = await this.browser.findElement({ css: '#test-element-wrapper' });
          const toastControl = await this.browser.findElement({ css: 'button' });

          await this.browser
            .actions({ bridge: true })
            .click(toastControl)
            .perform();

          await this.browser.wait(until.elementLocated({ css: '[data-tid~="ToastView__root"]' }), 3000);
          await sleep(this.browser, 7000);

          const toastClosedTimeout = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .click(toastControl)
            .perform();

          const toast = await this.browser.wait(until.elementLocated({ css: '[data-tid~="ToastView__root"]' }), 3000);
          await this.browser
            .actions({ bridge: true })
            .move({ origin: toast })
            .perform();

          await sleep(this.browser, 7000);
          const toastNotClosingOnHover = await element.takeScreenshot();

          await this.expect({ toastClosedTimeout, toastNotClosingOnHover }).to.matchImages();
        },
      },
    },
  },
};

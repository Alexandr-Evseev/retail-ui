import { OkIcon } from './internal/icons/16px';

export default {
  title: 'üòå TestRetreat',
};

export const LinkPressedThenReleased = () => {
  return (
    <Link>Enabled</Link>
  );
}

/**
 * Link
 * 
 * 0. –ò—Å—Ç–æ—Ä–∏—è LinkPressedThenReleased
 * 1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * 2. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * 3. –ù–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å—Å—ã–ª–∫—É
 * 4. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è hover
 * 5. –ù–∞–∂–∞—Ç—å –Ω–∞ —Å—Å—ã–ª–∫—É
 * 6. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è pressed/mouseDown
 * 7. –û—Ç–ø—É—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É
 * 8. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è hover
 */

LinkPressedThenReleased.story = {
  parameters: {
    creevey: {
      tests: {
        async pressedThenReleased(this: { browser: WebDriver }) {
          const element = await this.browser.findElement({ css: '#test-element' });
          const link = await this.browser.findElement({ css: '[data-comp-name~=Link]' });

          const idle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: link })
            .perform();

          const hover = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .press()
            .perform();

          const pressed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .release()
            .perform();

          const released = await element.takeScreenshot();

          await expect({ idle, hover, pressed, released }).to.matchImages();
        },
      },
    },
  },
};


export const LinkFocused = () => {
  return (
    <Link>Enabled</Link>
  );
}

LinkFocused.story = {
  parameters: {
    creevey: {
      tests: {
        async hover(this: { browser: WebDriver }) {
          const element = await this.browser.findElement({ css: '#test-element' });

          await this.browser
            .actions({ bridge: true })
            .sendKeys(Key.TAB)
            .perform();

          const focused = await element.takeScreenshot();

          await expect({ focused }).to.matchImages();
        },
      },
    },
  },
};



export const LinkDisabled = () => {
  return (
    <Link disabled={true}>Disabled</Link>
  );
}

/**
 * Link
 * 
 * 0. –ò—Å—Ç–æ—Ä–∏—è LinkDisabled
 * 1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * 2. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–¥–∏–∑–∞–±–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * 3. –ù–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å—Å—ã–ª–∫—É
 * 4. –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è hover
 */

LinkDisabled.story = {
  parameters: {
    creevey: {
      tests: {
        async hover(this: { browser: WebDriver }) {
          const element = await this.browser.findElement({ css: '#test-element' });
          const link = await this.browser.findElement({ css: '[data-comp-name~=Link]' });

          const idle = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .move({ origin: link })
            .perform();

          const hover = await element.takeScreenshot();

          await expect({ idle, hover }).to.matchImages();
        },
      },
    },
  },
};

export const LinkWithIcon = () => {
  return (
    <Link icon={<OkIcon/>}>OK</Link>
  );
}

export const LinkWithSpaces = () => {
  return (
    <Link>Link with spaces</Link>
  );
}

export const LinkSuccess = () => {
  return (
    <Link use="success">Link with spaces</Link>
  );
}

export const LinkDanger = () => {
  return (
    <Link use="danger">Link with spaces</Link>
  );
}

export const LinkGrayed = () => {
  return (
    <Link use="grayed">Link with spaces</Link>
  );
}

// TODO –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤—ã—à–µ


export const ButtonWithIcon = () => {
  return <Button>Hello üëã</Button>;
};

/**
 *  Button. –°–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è ButtonWithIcon
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ –ö–Ω–æ–ø–∫—É
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *  5. –ù–∞–±–ª—é–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
 *
 *  Profit!
 */

ButtonWithIcon.story = {
  parameters: {
    creevey: {
      tests: {
        async hover(this: { browser: WebDriver }) {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });
          // –Ω–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
          const button = await this.browser.findElement({ css: 'button' });

          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();

          // 3. –Ω–∞–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏
          await this.browser
            .actions({ bridge: true })
            .move({ origin: button })
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
          const hover = await element.takeScreenshot();

          // 5. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await expect({ idle, hover }).to.matchImages();
        },
      },
    },
  },
};

export const BasicAutocomplete = () => {
  const [value, updateValue] = React.useState('');
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete source={['one', 'two', 'three']} value={value} onValueChange={updateValue} />
    </div>
  );
};

/**
 *  Autocomplete. –í—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ Enter
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ —Ñ–æ–∫—É—Å–µ"
 *  4. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª "–æ"
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  6. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  8. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  9. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 *  Profit!
 */

BasicAutocomplete.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected(this: { browser: WebDriver }) {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          const focused = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('o')
            .perform();

          const typed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(Key.ARROW_DOWN)
            .perform();

          const highlighted = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(Key.ENTER)
            .perform();

          const selected = await element.takeScreenshot();

          await expect({ focused, typed, highlighted, selected }).to.matchImages();
        },
      },
    },
  },
};

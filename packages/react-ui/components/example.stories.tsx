export default {
  title: 'üòå TestRetreat ',
};

export const HelloWorld = () => 'üëã';

export const ButtonWithIcon = () => <Button icon={<i>üêª</i>}>with Icon</Button>;

ButtonWithIcon.story = {
  parameters: {
    creevey: {
      tests: {
        async simple(this: { browser: WebDriver }) {
          const element = await this.browser.findElement({ css: '#test-element' });
          const idle = await element.takeScreenshot();
          await expect(idle).to.matchImage();
        },
      },
    },
  },
};

export const BasicAutocomplete = () => {
  const [value, updateValue] = useState('');
  return <Autocomplete source={['one', 'two', 'three']} value={value} onValueChange={updateValue} />;
};

BasicAutocomplete.story = {
  parameters: {
    creevey: {
      tests: {
        async focused(this: { browser: WebDriver }) {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: 'input' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          const focused = await element.takeScreenshot();
          await expect(focused).to.matchImage();
        },
        async itemSelected(this: { browser: WebDriver }) {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: 'input' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          const focused = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('o')
            .perform();

          const typed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(Key.ARROW_DOWN)
            .perform();

          const highlighted = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(Key.ENTER)
            .perform();

          const selected = await element.takeScreenshot();

          await expect({ focused, typed, highlighted, selected }).to.matchImages();
        },
      },
    },
  },
};

/**
 * Autocomplete. –ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é Esc.
 *
 * –®–∞–≥–∏:
 *  1. –û—Ç–∫—Ä—ã—Ç—å story BasicAutocomplete.
 *     –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π Autocomplete –±–µ–∑ –¥–æ–ø. –ø—Ä–æ–ø–æ–≤.
 *  2. –ö–ª–∏–∫–Ω—É—Ç—å –ø–æ –ø–æ–ª—é –≤–≤–æ–¥–∞.
 *     –î–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å—Å—è –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫.
 *  3. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É Esc –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
 *     –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω –∑–∞–∫—Ä—ã—Ç—å—Å—è.
 */

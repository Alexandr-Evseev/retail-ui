import { Checkbox } from './Checkbox';
import React, { Component } from 'react';
import { CSFStory } from 'creevey';

export default {
  title: 'üòå TestRetreat ',
};

export const ButtonWithIcon = () => {
  return <Button>Hello üëã</Button>;
};

/**
 *  Button. –°–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è ButtonWithIcon
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ –ö–Ω–æ–ø–∫—É
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äúhover‚Äù
 *  5. –ù–∞–±–ª—é–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
 *
 *  Profit!
 */

ButtonWithIcon.story = {
  parameters: {
    creevey: {
      tests: {
        async hover(this: { browser: WebDriver }) {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });
          // –Ω–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
          const button = await this.browser.findElement({ css: 'button' });

          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();

          // 3. –Ω–∞–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏
          await this.browser
            .actions({ bridge: true })
            .move({ origin: button })
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
          const hover = await element.takeScreenshot();

          // 5. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await expect({ idle, hover }).to.matchImages();
        },
      },
    },
  },
};

export const BasicAutocomplete = () => {
  const [value, updateValue] = React.useState('');
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete source={['one', 'two', 'three']} value={value} onValueChange={updateValue} />
    </div>
  );
};

/**
 *  Autocomplete. –í—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ Enter
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ —Ñ–æ–∫—É—Å–µ"
 *  4. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª "–æ"
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  6. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  8. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  9. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 *  Profit!
 */

BasicAutocomplete.story = {
  parameters: {
    creevey: {
      tests: {
        async itemSelected(this: { browser: WebDriver }) {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          const focused = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('o')
            .perform();

          const typed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(Key.ARROW_DOWN)
            .perform();

          const highlighted = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(Key.ENTER)
            .perform();

          const selected = await element.takeScreenshot();

          await expect({ focused, typed, highlighted, selected }).to.matchImages();
        },
      },
    },
  },
};

class CheckboxWithTextClass extends Component<any, any> {
  public state = {
    checked: false,
  };

  public render() {
    const { checked } = this.state;
    return (
      <Checkbox onValueChange={() => this.setState({ checked: !checked })} checked={checked}>
        {this.props.children}
      </Checkbox>
    );
  }
}

export const CheckboxWithText: CSFStory<JSX.Element> = () => <CheckboxWithTextClass><div data-tid="text">CheckboxWithText</div></CheckboxWithTextClass>;

/**
 *  Checkbox.
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è CheckboxWithText
 *  1. –ù–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–µ–∫—Å—Ç —É —á–µ–∫–±–æ–∫—Å–∞
 *  2. –§–æ–∫—É—Å –Ω–∞ —Ç–µ–∫—Å—Ç —á–µ–∫–±–æ–∫—Å–∞
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ –≤—ã–±—Ä–∞–Ω –∏ –≤ —Ñ–æ–∫—É—Å–µ"
 *  4. –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç —á–µ–∫–±–æ—Å–∞
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–∞–∂–∞—Ç –∏ –≤—ã–±—Ä–∞–Ω"
 *  6. –û—Ç–∂–∏–º–∞–µ–º
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±—Ä–∞–Ω –∏ –≤ —Ñ–æ–∫—É—Å–µ"
 *  8. –°–Ω–∏–º–∞–µ–º —Ñ–æ–∫—É—Å
 *  9. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±—Ä–∞–Ω –∏ –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ"
 *
 *  Profit!
 */

CheckboxWithText.story = {
  parameters: {
    creevey: {
      tests: {
        async idle() {
          await this.expect(await this.takeScreenshot()).to.matchImage('idle');
        },
        async hoverOnLabel() {
          const label = await this.browser.findElement({ css: '[data-tid~=text]' });
          await this.browser.
            actions({
              bridge: true
            }).
            move({
              origin: label,
            }).
            perform();
          await this.expect(await this.takeScreenshot()).to.matchImage('hoverOnLabel');
        },
      }
    }
  }
}

class CheckboxWithIndeterminateState extends Component<any, any> {
  state = {
    checked: false,
    initialIndeterminate: true,
  };

  public render() {
    const { checked, initialIndeterminate } = this.state;
    return (
      <Checkbox
        initialIndeterminate={initialIndeterminate}
        onValueChange={() => this.setState({ checked: !checked })}
        checked={checked}
      >
        {this.props.children}
      </Checkbox>
    );
  }
}

export const SimpleCheckbox: CSFStory<JSX.Element> = () => (
  <CheckboxWithIndeterminateState>Click me </CheckboxWithIndeterminateState>
);

/**
 *  Checkbox.
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è SimpleCheckbox
 *
 *  Profit!
 */

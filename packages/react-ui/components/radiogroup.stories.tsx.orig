export default {
  title: 'üòå TestRetreat ',
};

interface Option {
  id: string;
  value: string;
}

export const MyTest = () => {
  const [currentAnswer, setCurrentAnswer] = React.useState('');
  const [showResult, setShowResult] = React.useState(false);

  const rightAnswer = 'saturday';
  const options: Option[] = [
    { id: 'friday', value: '–ü—è—Ç–Ω–∏—Ü–∞' },
    { id: 'saturday', value: '–°—É–±–±–æ—Ç–∞' },
    { id: 'monday', value: '–ü–æ–Ω–¥–µ–ª—å–Ω–∏–∫ :(' },
  ];

  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <h3>–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å?</h3>
      <RadioGroup onValueChange={handleAnswerSelection}>
        <Gapped vertical gap={10}>
          {options.map((x: Option, index: number) => (
            <Radio
              data-tid={`option${index}`}
              key={x.id}
              value={x.id}
              error={showResult && currentAnswer === x.id && currentAnswer !== rightAnswer}
            >
              {x.value}
            </Radio>
          ))}
          <Button data-tid="checkButton" onClick={() => setShowResult(true)}>
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å!
          </Button>
        </Gapped>
      </RadioGroup>
    </div>
  );

  function handleAnswerSelection(x: any) {
    setCurrentAnswer(x);
    setShowResult(false);
  }
};

/**
<<<<<<< Updated upstream
 *  MyTest. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –∫—Ä–∞—Å–Ω–µ–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è MyTest
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *  3. –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç "–°—É–±–±–æ—Ç–∞"
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞‚Äù
 *  5. –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å!"
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞‚Äù
=======
 *  Button. –°–æ—Å—Ç–æ—è–Ω–∏–µ "error"
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è MyTest
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç "–ü—è—Ç–Ω–∏—Ü–∞" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. üì∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "active"
 *  3. –ù–∞–≤–µ—Å—Ç–∏ –º—ã—à—å –Ω–∞ –ö–Ω–æ–ø–∫—É
 *  4. üì∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–µ–¥–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
 *  5. –í—ã–±–æ—Ä
 *  6. üì∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ
 *  7. –ù–∞–∂–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
 *  8. üì∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ "error"
 *
 *  Profit!
>>>>>>> Stashed changes
 */

MyTest.story = {
  parameters: {
    creevey: {
      tests: {
        async hover(this: { browser: WebDriver }) {
          // 1. –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });
          // –Ω–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
          const button = await this.browser.findElement({ css: 'button' });

          // 2. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
          const idle = await element.takeScreenshot();

          // 3. –Ω–∞–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏
          await this.browser
            .actions({ bridge: true })
            .move({ origin: button })
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
          const hover = await element.takeScreenshot();

          // 5. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await expect({ idle, hover }).to.matchImages();
        },
      },
    },
  },
};

import { element } from 'prop-types';

import { RadioGroup } from './RadioGroup';

export default {
  title: 'üòå TestRetreat ',
};

export const RadioGroupVertical = () => (
  <RadioGroup>
    <Gapped vertical gap={10}>
      <Radio value="fd">1</Radio>
      <Radio value="er">2</Radio>
      <Radio value="gs">3</Radio>
    </Gapped>
  </RadioGroup>
);

/**
 * 0. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
 * 1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
 * 2. üì∏—Å–∫—Ä–∏–Ω—à–æ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * 3. –ù–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä
 * 4. üì∏–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
 * 5. üì∏–ù–∞–∂–∞—Ç–∏–µ-–°–∫—Ä–∏–Ω—à–æ—Ç –º–æ–º–µ–Ω—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
 * 6. üì∏–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
 * 7. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
 * 8. üì∏–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
 * 9. –Ω–∞–∂–∞—Ç–∏–µ —Ç–∞–±–∞
 * 10. üì∏–°–∫—Ä–∏–Ω—à–æ—Ç –±–µ–∑ —Ñ–æ–∫—É—Å–∞
 * 11. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç
 * 12. üì∏–°–∫—Ä–∏–Ω—à–æ—Ç –¥—Ä—É–≥–æ–≥–æ –≤—ã–±–æ—Ä–∞
 *  Profit!
 */

RadioGroupVertical.story = {
  parameters: {
    creevey: {
      tests: {
        async cliksToVerticalElements(this: { browser: WebDriver }) {
          // 0. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
          const element = await this.browser.findElement({ css: '#test-element' });

          // 1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
          const button = await this.browser.findElements({ css: '[data-comp-name=Radio]' });

          // 2. –°–∫—Ä–∏–Ω—à–æ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          const defaultState = await element.takeScreenshot();

          // 3.  –ù–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä
          await this.browser
            .actions({ bridge: true })
            .move({ origin: button[0] })
            .perform();

          // 4. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
          const cursor = await element.takeScreenshot();

          // 5. –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç "–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏"
          await this.browser
            .actions({ bridge: true })
            .move({ origin: button[0] })
            .press(0)
            .perform();

          const click = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .release()
            .perform();

          //6. —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
          const afterClick = await element.takeScreenshot();

          // 7. –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
          await this.browser
            .actions({ bridge: true })
            .click(button[0])
            .perform();

          // 8. —Å–∫—Ä–∏–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
          const afterRepiatClick = await element.takeScreenshot();

          // 9. –Ω–∞–∂–∞—Ç–∏–µ —Ç–∞–±–∞
          await this.browser
            .actions({ bridge: true })
            .sendKeys(Key.TAB)
            .perform();

          // 10. —Å–∫—Ä–∏–Ω –±–µ–∑ —Ñ–æ–∫—É—Å–∞
          const withoutFocus = await element.takeScreenshot();

          // 11. –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç
          await this.browser
            .actions({ bridge: true })
            .click(button[2])
            .perform();

          // 12. —Å–∫—Ä–∏–Ω –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          const otherElement = await element.takeScreenshot();

          // 13. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          await expect({
            defaultState,
            cursor,
            click,
            afterClick,
            afterRepiatClick,
            withoutFocus,
            otherElement,
          }).to.matchImages();
        },
      },
    },
  },
};

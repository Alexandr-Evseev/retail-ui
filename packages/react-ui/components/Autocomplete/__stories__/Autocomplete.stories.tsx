import React from 'react';
import { CreeveyStoryParams, CSFStory } from 'creevey';

import { Gapped } from '../../Gapped';
import { Autocomplete } from '../Autocomplete';

export default { title: 'Autocomplete' };

export const Simple = () => <UncontrolledAutocomplete source={['One', 'Two', 'Three']} />;
Simple.story = { name: 'simple', parameters: { creevey: { skip: [true] } } };

export const ControlledAutocomplete: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete source={['one', 'two', 'three']} value={value} onValueChange={updateValue} />
    </div>
  );
};
ControlledAutocomplete.story = {
  parameters: {
    creevey: {
      tests: {
        /**
         *  Autocomplete. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞
         *
         *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
         *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
         *  3. –í–≤–µ—Å—Ç–∏ "ONE"
         *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ"
         *
         *  Profit!
         */
        async shouldSuggestCaseIndependent() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('ONE')
            .perform();

          const upperCaseTyped = await element.takeScreenshot();

          await this.expect({ typed: upperCaseTyped }).to.matchImages();
        },
        /**
         *  Autocomplete. –û–±—Ä–µ–∑–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã
         *
         *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
         *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
         *  3. –í–≤–µ—Å—Ç–∏ "   two   "
         *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ"
         *
         *  Profit!
         */
        async shouldIgnoreSpacesAfterOrBefore() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('   two   ')
            .perform();

          const typedWithSpaces = await element.takeScreenshot();

          await this.expect({ typed: typedWithSpaces }).to.matchImages();
        },
      },
    },
  },
};

export const WithRenderItem = () => (
  <UncontrolledAutocomplete
    source={['One', 'Two', 'Three']}
    renderItem={(x: string) => <div>Item: {x.toUpperCase()}</div>}
  />
);
WithRenderItem.story = { name: 'with renderItem', parameters: { creevey: { skip: [true] } } };

export const WithBigRenderItemWidth = () => (
  <UncontrolledAutocomplete
    source={['One', 'Two', 'Three']}
    renderItem={(x: string) => <div style={{ width: 400 }}>Item: {x.toUpperCase()}</div>}
  />
);
WithBigRenderItemWidth.story = { name: 'with big renderItem width', parameters: { creevey: { skip: [true] } } };

export const WithFixedMenuSize = () => (
  <UncontrolledAutocomplete
    source={[
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
      'Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed.',
      'Sed dignissim lacinia nunc. Curabitur tortor. Pellentesque nibh.',
      'Donec lacus nunc, viverra nec.',
      'Sed lectus. Integer euismod lacus luctus magna.',
      'Suspendisse potenti.',
      ' Sed dignissim lacinia nunc.',
    ]}
    renderItem={(x: string) => <div>{x}</div>}
    menuWidth={400}
    menuMaxHeight={150}
  />
);
WithFixedMenuSize.story = { name: 'with fixed menu size', parameters: { creevey: { skip: [true] } } };

export const WithOnBlurOnFocusHandlers = () => <WithBlurFocusHandlersExample />;
WithOnBlurOnFocusHandlers.story = { name: 'with onBlur/onFocus handlers', parameters: { creevey: { skip: [true] } } };

class UncontrolledAutocomplete extends React.Component<any, any> {
  public state = {
    value: '',
  };

  public render() {
    return (
      <Autocomplete
        {...this.props}
        value={this.state.value}
        onValueChange={value => {
          this.setState({ value });
        }}
      />
    );
  }
}

class WithBlurFocusHandlersExample extends React.Component<any, any> {
  public state = {
    focusCount: 0,
    blurCount: 0,
  };
  public render() {
    return (
      <Gapped vertical>
        <UncontrolledAutocomplete
          onFocus={() => {
            const { focusCount } = this.state;
            this.setState({ focusCount: focusCount + 1 });
          }}
          onBlur={() => {
            const { blurCount } = this.state;
            this.setState({ blurCount: blurCount + 1 });
          }}
          source={'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'.split(
            ' ',
          )}
        />
        <span>Focuses count: {this.state.focusCount}</span>
        <span>Blures count: {this.state.blurCount}</span>
      </Gapped>
    );
  }
}

export const AutocompleteWithScroll: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  const items = [];
  for (let i = 0; i < 20; i++) {
    items.push(`Abba ${i}`);
  }
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete source={items} value={value} onValueChange={updateValue} />
    </div>
  );
};

AutocompleteWithScroll.story = {
  parameters: {
    creevey: {
      tests: {
        /**
         *  Autocomplete. –ü—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∏–¥–µ–Ω —Å–∫—Ä–æ–ª–ª–±–∞—Ä
         *
         *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithScroll
         *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
         *  3. –í–≤–µ—Å—Ç–∏ "Abba"
         *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä–æ–ø–¥–∞—É–Ω–∞ —Å–æ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–º
         *
         *  Profit!
         */
        async scrollBarShouldBeVisible() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const autocomplete = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(autocomplete)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('Abba')
            .perform();

          const autocompleteWithScroll = await element.takeScreenshot();

          await this.expect({ autocompleteWithScroll }).to.matchImages();
        },
        /**
         *  Autocomplete. –°–∫—Ä–æ–ª–ª–±–∞—Ä —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
         *
         *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithScroll
         *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
         *  3. –í–≤–µ—Å—Ç–∏ "Abba"
         *  4. –ù–∞—Ö–æ–¥–∏–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
         *  5. –ù–∞–≤–æ–¥–∏–º –Ω–∞ –Ω–µ–≥–æ –º—ã—à—å
         *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ –≤ –¥—Ä–æ–ø–¥–∞—É–Ω–µ
         *
         *  Profit!
         */
        async scrollBarShouldEnlargeOnHover() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const autocomplete = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(autocomplete)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('Abba')
            .perform();

          const scrollBar = await this.browser.findElement({ className: 'react-ui-ejkfzu' });
          await this.browser
            .actions({ bridge: true })
            .move({ origin: scrollBar })
            .perform(); //Hover –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ IE11
          const scrollBarOnHover = await element.takeScreenshot();

          await this.expect({ scrollBarOnHover }).to.matchImages();
        },
      },
    },
  },
};

/**
 *  Autocomplete. –¢–µ–∫—Å—Ç –≤–≤–æ–¥–∏—Ç—Å—è —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é / –ø–æ —Ü–µ–Ω—Ç—Ä—É
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è AutocompleteWithRightTextAlignment
 *  1. –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *  2. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  3. –í–≤–µ—Å—Ç–∏ "text"
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
 *
 *  Profit!
 */

export const AutocompleteWithRightTextAlignment: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete align={'right'} source={['one', 'two', 'three']} value={value} onValueChange={updateValue} />
    </div>
  );
};

const textAlignmentTest: CreeveyStoryParams['tests'] = {
  async textShouldBeAligned() {
    const element = await this.browser.findElement({ css: '#test-element' });
    const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

    await this.browser
      .actions({ bridge: true })
      .click(input)
      .perform();

    await this.browser
      .actions({ bridge: true })
      .sendKeys('text')
      .perform();

    const typed = await element.takeScreenshot();
    await this.expect({ typed }).to.matchImages();
  },
};

AutocompleteWithRightTextAlignment.story = {
  parameters: {
    creevey: {
      tests: textAlignmentTest,
    },
  },
};

export const AutocompleteWithCenterTextAlignment: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete align={'center'} source={['one', 'two', 'three']} value={value} onValueChange={updateValue} />
    </div>
  );
};

AutocompleteWithCenterTextAlignment.story = {
  parameters: {
    creevey: {
      tests: textAlignmentTest,
    },
  },
};

export const BasicAutocomplete: CSFStory<JSX.Element> = () => {
  const [value, updateValue] = React.useState('');
  return (
    <div style={{ padding: '4px 200px 200px 4px' }}>
      <Autocomplete
        source={['first value', 'first one more time', 'second value', 'third value']}
        value={value}
        onValueChange={updateValue}
      />
    </div>
  );
};

/**
 *  Autocomplete. –í—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ Enter
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ —Ñ–æ–∫—É—Å–µ"
 *  3. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª "f"
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  5. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  6. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  7. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  8. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 *  Profit!
 */

/**
 *  Autocomplete. –ü—Ä–æ–ø–∞–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—à–∫–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª "f"
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  4. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª "s"
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚Äù
 *
 */

/**
 *  Autocomplete. –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–≤—É–º —Å–ª–æ–≤–∞–º
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "first value"
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  6. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 */

/**
 *  Autocomplete. –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "rst"
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  6. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 */

/**
 *  Autocomplete. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "rst"
 *  3. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª‚Äù
 *  4. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ARROW_DOWN
 *  5. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–ø–æ–¥—Å–≤–µ—á–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *  6. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  7. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 */

/**
 *  Autocomplete. –ù–∞–∂–∞—Ç–∏–µ Enter –ø—Ä–∏ –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
 *
 *  0. –ò—Å—Ç–æ—Ä–∏—è BasicAutocomplete
 *  1. –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
 *  2. –í–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª—ã "first"
 *  3. –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É ENTER
 *  4. üì∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äú–Ω–µ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç‚Äù
 *
 */

BasicAutocomplete.story = {
  parameters: {
    creevey: {
      tests: {
        async wrongTyped() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('f')
            .perform();

          const typed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('x')
            .perform();

          const typedWrong = await element.takeScreenshot();

          await this.expect({ typed, typedWrong }).to.matchImages();
        },

        async severalWords() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('first value')
            .perform();

          const typed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ARROW_DOWN)
            .perform();

          const highlighted = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ENTER)
            .perform();

          const selected = await element.takeScreenshot();

          await this.expect({ typed, highlighted, selected }).to.matchImages();
        },

        async notFirstSymbol() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('rst')
            .perform();

          const typed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ARROW_DOWN)
            .perform();

          const highlighted = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ENTER)
            .perform();

          const selected = await element.takeScreenshot();

          await this.expect({ typed, highlighted, selected }).to.matchImages();
        },

        async saveTextOnBlur() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('first')
            .perform();

          const typed = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.TAB)
            .perform();

          const noFocus = await element.takeScreenshot();

          await this.expect({ typed, noFocus }).to.matchImages();
        },

        async enterWhenNoSelectedItem() {
          const element = await this.browser.findElement({ css: '#test-element' });
          const input = await this.browser.findElement({ css: '[data-comp-name~=Autocomplete]' });

          await this.browser
            .actions({ bridge: true })
            .click(input)
            .perform();

          const empty = await element.takeScreenshot();

          await this.browser
            .actions({ bridge: true })
            .sendKeys('first')
            .perform();

          await this.browser
            .actions({ bridge: true })
            .sendKeys(this.keys.ENTER)
            .perform();

          const selected = await element.takeScreenshot();

          await this.expect({ empty, selected }).to.matchImages();
        },
      },
    },
  },
};
